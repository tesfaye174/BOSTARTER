/**
 * BOSTARTER - JAVASCRIPT OTTIMIZZATO
 * Versione semplificata e funzionante
 */

(function(){
    'use strict';

    // Namespace globale
    window.BOSTARTER = window.BOSTARTER || {};

    // Utility functions
    BOSTARTER.utils = {
        formatCurrency: function(amount, currency) {
            currency = currency || 'EUR';
            if (isNaN(amount) || amount === null || amount === undefined) {
                return '0,00 â‚¬';
            }
            return new Intl.NumberFormat('it-IT', {
                style: 'currency',
                currency: currency,
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(amount);
        },

        formatDate: function(dateString, includeTime) {
            const date = new Date(dateString);
            return includeTime ? date.toLocaleString('it-IT') : date.toLocaleDateString('it-IT');
        },

        debounce: function(func, wait) {
            let timeout;
            return function executedFunction() {
                const later = () => {
                    clearTimeout(timeout);
                    func.apply(this, arguments);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        },

        throttle: function(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            };
        }
    };

    // Notification system
    BOSTARTER.notifications = {
        show: function(message, type, duration) {
            type = type || 'info';
            duration = duration || 3000;

            // Remove existing toasts
            const existingToasts = document.querySelectorAll('.toast-bostarter');
            existingToasts.forEach(function(toast) {
                toast.remove();
            });

            // Create new toast
            const toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';

            const toastHTML = '<div class="toast toast-bostarter align-items-center show" role="alert">' +
                '<div class="d-flex">' +
                    '<div class="toast-body">' +
                        '<i class="fas fa-' + this.getIcon(type) + ' me-2"></i>' +
                        message +
                    '</div>' +
                    '<button type="button" class="btn-close" data-bs-dismiss="toast"></button>' +
                '</div>' +
            '</div>';

            toastContainer.innerHTML = toastHTML;

            // Apply color class
            const toast = toastContainer.querySelector('.toast');
            toast.classList.add('toast-' + type);

            // Add to DOM
            document.body.appendChild(toastContainer);

            // Initialize and show
            const bsToast = new bootstrap.Toast(toast, { delay: duration });
            bsToast.show();

            // Remove from DOM when hidden
            toast.addEventListener('hidden.bs.toast', function() {
                toastContainer.remove();
            });
        },

        getIcon: function(type) {
            const icons = {
                success: 'check-circle',
                error: 'exclamation-triangle',
                warning: 'exclamation-circle',
                info: 'info-circle'
            };
            return icons[type] || 'info-circle';
        }
    };

    // Theme management
    BOSTARTER.theme = {
        init: function() {
            const themeToggle = document.getElementById('themeToggle');
            const html = document.documentElement;

            if (!themeToggle) return;

            // Load saved theme
            const savedTheme = localStorage.getItem('bostarter-theme') || 'light';
            html.setAttribute('data-bs-theme', savedTheme);

            if (savedTheme === 'dark') {
                themeToggle.classList.add('dark');
            }

            // Toggle event listener
            themeToggle.addEventListener('click', function() {
                const currentTheme = html.getAttribute('data-bs-theme');
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

                html.setAttribute('data-bs-theme', newTheme);
                localStorage.setItem('bostarter-theme', newTheme);

                // Update toggle class
                if (newTheme === 'dark') {
                    themeToggle.classList.add('dark');
                } else {
                    themeToggle.classList.remove('dark');
                }

                // Show notification
                BOSTARTER.notifications.show('Tema ' + (newTheme === 'dark' ? 'scuro' : 'chiaro') + ' attivato', 'info');
            });
        },

        toggle: function() {
            const themeToggle = document.getElementById('themeToggle');
            if (themeToggle) {
                themeToggle.click();
            }
        }
    };

    // UI management
    BOSTARTER.ui = {
        init: function() {
            this.initTooltips();
            this.initScrollAnimations();
            this.initScrollToTop();
            this.initKeyboardShortcuts();
        },

        initTooltips: function() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    delay: { show: 300, hide: 100 }
                });
            });
        },

        initScrollAnimations: function() {
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver(function(entries) {
                entries.forEach(function(entry) {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                        observer.unobserve(entry.target);
                    }
                });
            }, observerOptions);

            // Observe elements to animate
            document.querySelectorAll('.animate-fade-up, .animate-fade-left, .animate-fade-right').forEach(function(el) {
                el.style.opacity = '0';
                el.style.transform = 'translateY(20px)';
                el.style.transition = 'all 0.8s cubic-bezier(0.4, 0, 0.2, 1)';
                observer.observe(el);
            });

            // Animate counters
            document.querySelectorAll('.stat-number').forEach(function(counter) {
                const target = parseInt(counter.dataset.target) || 0;
                const duration = 2000;
                let current = 0;
                const step = target / (duration / 16);

                const timer = setInterval(function() {
                    current += step;
                    if (current >= target) {
                        counter.textContent = target.toLocaleString();
                        clearInterval(timer);
                    } else {
                        counter.textContent = Math.floor(current).toLocaleString();
                    }
                }, 16);
            });
        },

        initScrollToTop: function() {
            const scrollButton = document.getElementById('scrollToTopBtn');
            if (!scrollButton) return;

            // Show/hide button
            window.addEventListener('scroll', BOSTARTER.utils.throttle(function() {
                if (window.pageYOffset > 300) {
                    scrollButton.classList.add('visible');
                } else {
                    scrollButton.classList.remove('visible');
                }
            }, 16));

            // Scroll to top
            scrollButton.addEventListener('click', function() {
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            });
        },

        initKeyboardShortcuts: function() {
            document.addEventListener('keydown', function(e) {
                // ESC to close modal
                if (e.key === 'Escape') {
                    const modal = document.querySelector('.modal.show');
                    if (modal) {
                        const bsModal = bootstrap.Modal.getInstance(modal);
                        if (bsModal) bsModal.hide();
                    }
                }

                // T to toggle theme
                if (e.key === 't' && !e.ctrlKey && !e.metaKey) {
                    e.preventDefault();
                    BOSTARTER.theme.toggle();
                }
            });
        }
    };

    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
        BOSTARTER.ui.init();
        BOSTARTER.theme.init();
        console.log('ðŸš€ BOSTARTER v5.0 Initialized');
    });

    // Global error handling
    window.addEventListener('error', function(e) {
        console.error('JavaScript Error:', e.error);
        BOSTARTER.notifications.show('Errore applicazione', 'error');
    });

    window.addEventListener('unhandledrejection', function(e) {
        console.error('Unhandled Promise Rejection:', e.reason);
        BOSTARTER.notifications.show('Errore applicazione', 'error');
    });

})();
